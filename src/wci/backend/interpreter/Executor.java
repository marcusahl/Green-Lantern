package wci.backend.interpreter;

import wci.backend.Backend;
import wci.backend.interpreter.executors.*;
import wci.intermediate.*;
import wci.message.Message;

import static wci.message.MessageType.*;


/**
 * <h1>Executor</h1>
 * 
 *<p>Back end class for the Executor, the central component of the interpreter application.</p>
 */
public class Executor extends Backend {

	protected static int executionCount;
	protected static RuntimeErrorHandler errorHandler;
	
	static
	{
		executionCount = 0;
		errorHandler = new RuntimeErrorHandler();
	}
	
	public Executor() {
		// TODO Auto-generated constructor stub
	}
	
	/**
	 * Constructor for subclasses.
	 * @param parent the parent executor.
	 */
	public Executor(Executor parent)
	{
		super();
	}

	
	/**
	 * Process the intermediate code and the symbol table generated by the 
	 * parser to execute the source program.
	 * @param iCode the intermediate code.
	 * @param symTabStack the symbol table stack.
	 * @throws Exception if an error occurred.
	 */
	public void process(ICode iCode, SymTabStack symTabStack) throws Exception 
	{
		this.symTabStack = symTabStack;
		this.iCode = iCode;
		
		long startTime = System.currentTimeMillis();
		
		//	Get the root node of the intermediate code and execute.
		ICodeNode rootNode = iCode.getRoot();
		StatementExecutor statementExecutor = new StatementExecutor(this);
		statementExecutor.execute(rootNode);
		
		float elapsedTime = ((System.currentTimeMillis()-startTime)/1000f);
		int runtimeErrors = errorHandler.getErrorCount();
		
		//	Send the interpreter summary message
		sendMessage(new Message(INTERPRETER_SUMMARY, new Number[] {executionCount, runtimeErrors, 
				elapsedTime}));
	

	}

}
