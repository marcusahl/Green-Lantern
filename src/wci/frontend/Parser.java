package wci.frontend;

import wci.intermediate.*;
import wci.message.MessageProducer;
import wci.message.MessageHandler;
import wci.message.MessageListener;
import wci.message.Message;

public abstract class Parser implements MessageProducer{

	protected static SymTabStack symTabStack; 	// symbol table stack
	protected static MessageHandler messageHandler; // message handler delegate
	
	static {
		symTabStack = SymTabFactory.createSymTabStack();
		messageHandler = new MessageHandler();
	}
	
	protected Scanner scanner; 	// scanner used with this parser
	protected ICode iCode; 	// intermediate code generated by this parser
	
	protected Parser(Scanner scanner) {
		this.scanner = scanner;
		this.iCode = null;
	}
	
	public abstract void parse() throws Exception;
	
	public abstract int getErrorCount();
	
	public Token currentToken() {
		return scanner.currentToken();
	}
	
	public Token nextToken() throws Exception {
		return scanner.nextToken();
	}
	
	public void addMessageListener(MessageListener listener) {
		messageHandler.addListener(listener);
	}
	
	public void removeMessageListener(MessageListener listener) {
		messageHandler.removeListener(listener);
	}
	
	public void sendMessage(Message message) {
		messageHandler.sendMessage(message);
	}
	
	public MessageHandler getMessageHandler() {
		return messageHandler;
	}
	
	public ICode getICode() {
		return iCode;
	}
	
	public SymTabStack getSymTabStack() {
		return symTabStack;
	}
	
}

